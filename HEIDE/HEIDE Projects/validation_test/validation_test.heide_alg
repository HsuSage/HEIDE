ptxt_add = $@0 + $@1

from random import randrange
r = randrange(1000)
ptxt_cadd = $@0 + r

ptxt_sub = $@0 - $@1

ptxt_csub = $@0 - r

ptxt_mul = $@0 * $@1

ptxt_cmul = $@0 * r

ptxt_neg = -$@0

ptxt_eq = $@0 == $@1

ptxt_neq = $@0 != $@1

# encrypt plaintext elements in $
&$

ctxt_add = $@0 + $@1

ctxt_iadd := $@0
ctxt_iadd += $@1

ctxt_cadd = $@0 + r

ctxt_sub = $@0 - $@1

ctxt_isub := $@0
ctxt_isub -= $@1

ctxt_csub = $@0 - r

ctxt_mul = $@0 * $@1

ctxt_imul := $@0
ctxt_imul *= $@1

ctxt_cmul = $@0 * r

ctxt_neg = -$@0

ctxt_eq = $@0 == $@1

ctxt_neq = $@0 != $@1

print("testing add ... "),
if *ctxt_add == ptxt_add.getPtxt():
	print("\t\t\t\tPASSED")
else:
	print("\t\t\t\tFAILED")

print("testing destructive add ... "),
if *ctxt_iadd == ptxt_add.getPtxt():
	print("\t\t\tPASSED")
else:
	print("\t\t\tFAILED")

print("testing const add ... "),
if *ctxt_cadd == ptxt_cadd.getPtxt():
	print("\t\t\t\tPASSED")
else:
	print("\t\t\t\tFAILED")

print("testing sub ... "),
if *ctxt_sub == ptxt_sub.getPtxt():
	print("\t\t\t\tPASSED")
else:
	print("\t\t\t\tFAILED")

print("testing destructive sub ... "),
if *ctxt_isub == ptxt_sub.getPtxt():
	print("\t\t\tPASSED")
else:
	print("\t\t\tFAILED")

print("testing const sub ... "),
if *ctxt_csub == ptxt_csub.getPtxt():
	print("\t\t\t\tPASSED")
else:
	print("\t\t\t\tFAILED")

print("testing mul ... "),
if *ctxt_mul == ptxt_mul.getPtxt():
	print("\t\t\t\tPASSED")
else:
	print("\t\t\t\tFAILED")

print("testing destructive mul ... "),
if *ctxt_imul == ptxt_mul.getPtxt():
	print("\t\t\tPASSED")
else:
	print("\t\t\tFAILED")

print("testing const mul ... "),
if *ctxt_cmul == ptxt_cmul.getPtxt():
	print("\t\t\t\tPASSED")
else:
	print("\t\t\t\tFAILED")

print("testing neg ... "),
if *ctxt_neg == ptxt_neg.getPtxt():
	print("\t\t\t\tPASSED")
else:
	print("\t\t\t\tFAILED")

print("testing eq ... "),
if ctxt_eq == ptxt_eq:
	print("\t\t\t\tPASSED")
else:
	print("\t\t\t\tFAILED")

print("testing neq ... "),
if ctxt_neq == ptxt_neq:
	print("\t\t\t\tPASSED")
else:
	print("\t\t\t\tFAILED")









